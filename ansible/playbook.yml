---
- name: Configure DevOps Demo Environment
  hosts: webservers
  become: true
  gather_facts: true

  vars:
    app_name: devops-demo
    app_user: appuser
    app_port: 3000
    node_version: "20.x"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install required system packages
      apt:
        name:
          - curl
          - git
          - wget
          - unzip
          - vim
          - htop
          - net-tools
          - build-essential
        state: present
      when: ansible_os_family == "Debian"

    - name: Create application user
      user:
        name: "{{ app_user }}"
        shell: /bin/bash
        home: "/home/{{ app_user }}"
        create_home: true
        state: present

    - name: Create application directory
      file:
        path: "/opt/{{ app_name }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0755"

    - name: Install Node.js repository
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_{{ node_version }} | bash -
      args:
        creates: /etc/apt/sources.list.d/nodesource.list

    - name: Install Node.js
      apt:
        name: nodejs
        state: present
        update_cache: true

    - name: Install Bun
      shell: |
        curl -fsSL https://bun.sh/install | bash
      args:
        creates: /root/.bun/bin/bun
      become_user: "{{ app_user }}"

    - name: Add Bun to PATH
      lineinfile:
        path: "/home/{{ app_user }}/.bashrc"
        line: 'export PATH="$HOME/.bun/bin:$PATH"'
        create: true
        owner: "{{ app_user }}"

    - name: Install Docker dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: true

    - name: Add user to docker group
      user:
        name: "{{ app_user }}"
        groups: docker
        append: true

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Configure firewall - Allow SSH
      ufw:
        rule: allow
        port: "22"
        proto: tcp

    - name: Configure firewall - Allow HTTP
      ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Configure firewall - Allow HTTPS
      ufw:
        rule: allow
        port: "443"
        proto: tcp

    - name: Configure firewall - Allow application port
      ufw:
        rule: allow
        port: "{{ app_port }}"
        proto: tcp

    - name: Enable UFW
      ufw:
        state: enabled

    - name: Create systemd service file for application
      copy:
        dest: "/etc/systemd/system/{{ app_name }}.service"
        content: |
          [Unit]
          Description=DevOps Demo Service
          After=network.target

          [Service]
          Type=simple
          User={{ app_user }}
          WorkingDirectory=/opt/{{ app_name }}
          ExecStart=/home/{{ app_user }}/.bun/bin/bun run src/index.ts
          Restart=on-failure
          RestartSec=10
          Environment=NODE_ENV=production
          Environment=PORT={{ app_port }}

          [Install]
          WantedBy=multi-user.target
        mode: "0644"

    - name: Configure log rotation
      copy:
        dest: "/etc/logrotate.d/{{ app_name }}"
        content: |
          /var/log/{{ app_name }}/*.log {
              daily
              rotate 7
              compress
              delaycompress
              notifempty
              create 0640 {{ app_user }} {{ app_user }}
              sharedscripts
          }
        mode: "0644"

    - name: Set timezone to UTC
      timezone:
        name: UTC

    - name: Configure sysctl for performance
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: true
      loop:
        - { name: "net.core.somaxconn", value: "1024" }
        - { name: "net.ipv4.tcp_max_syn_backlog", value: "2048" }
        - { name: "vm.swappiness", value: "10" }

    - name: Create monitoring directory
      file:
        path: /var/log/{{ app_name }}
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0755"

  handlers:
    - name: Restart application
      systemd:
        name: "{{ app_name }}"
        state: restarted
        daemon_reload: yes
